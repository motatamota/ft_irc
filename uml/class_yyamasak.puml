@startuml
' クラス定義
abstract class コマンド {
    +execute() : レスポンス(何かしらの処理実行後クライアントへ返すメッセージ取得)
}

class コマンド1 {
    +execute() : レスポンス
}

class コマンド2 {
    PRIVMSGコマンドに対応するもの
    +execute() : レスポンス
}

class 翻訳機 {
    +translate() : コマンド*
}

class コントローラー {
    +handleRequest() : void
}

class センダー {
    +send(レスポンス) : void
}

' 関係の定義
コマンド <|-- コマンド1 : 継承
コマンド <|-- コマンド2 : 継承

コントローラー <--> 翻訳機 : 1. コマンド取得・返却 (translate())
コントローラー <--> コマンド : 2. execute() 実行
コントローラー --> センダー : 3. send() 呼び出し(クライアントへの返却)

コマンド2 <..> センダー : チャンネルメンバーへ送信



' 呼び出しの流れ説明
note top of コントローラー
1. 翻訳機を呼び出し、対応するコマンドクラスを取得
2. コマンドクラスの execute() 実行 → レスポンス取得 & 副作用実行
3. レスポンスをセンダーに渡して送信
end note

@enduml